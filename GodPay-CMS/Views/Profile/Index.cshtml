@{
    ViewData["Title"] = "帳號管理";
}
<div class="row p-3">
    <div class="col-12">
        <div class="card vh-90">
            <div class="card-body">
                <div class="col-12 mb-5">
                    <div class="d-flex justify-content-end" v-if="this.$common.CheckAuthority(funcs,'Edit')">
                        <p-button type="button" icon="pi pi-user-edit" class="me-1 px-2" v-tooltip.top="'編輯基本資料'" v-on:click="OpenEditUserModal"></p-button>
                        <p-button type="button" icon="bi bi-gear-fill" class="me-1 px-2 p-button-danger" v-tooltip.top="'變更密碼'" v-on:click="OpenChangePasswordModal"></p-button>
                    </div>
                </div>
                <div class="col-12">
                    <table class="table table-responsive table-hover" >
                        <tbody>
                            <tr>
                                <td>
                                    <div class="mb-3 row">
                                        <label for="account" class="col-sm-2 col-form-label">帳號</label>
                                        <div class="col-sm-10">
                                            <input type="text" readonly class="form-control-plaintext outline-none" id="account" v-bind:value="user.userId">
                                        </div>
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <div class="mb-3 row">
                                        <label for="email" class="col-sm-2 col-form-label">Email</label>
                                        <div class="col-sm-10">
                                            <input type="email" readonly class="form-control-plaintext outline-none" id="email" v-bind:value="user.email">
                                        </div>
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <div class="mb-3 row">
                                        <label for="role" class="col-sm-2 col-form-label">權限</label>
                                        <div class="col-sm-10">
                                            <input type="text" readonly class="form-control-plaintext outline-none" id="role" v-bind:value="user.roleChName">
                                        </div>
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <div class="mb-3 row">
                                        <label class="col-sm-2 col-form-label">狀態</label>
                                        <div class="col-sm-10">
                                            <span v-if="user.statusChName=='帳號啟用中'" class="badge bg-success fs-5">{{user.statusChName}}</span>
                                            <span v-else-if="user.statusChName=='帳號尚未開通'" class="badge bg-danger fs-5">{{user.statusChName}}</span>
                                            <span v-else class="badge bg-warning text-dark fs-5">{{user.statusChName}}</span>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<edit-user-modal ref="editUser" v-bind:pemail="user.email" v-bind:model-error="modelStateError" v-on:save="SaveProfile"></edit-user-modal>
<change-password-modal ref="changePassword" v-bind:model-error="modelStateError" v-on:save="SaveKey"></change-password-modal>

<script type="text/javascript">
    @section Vue
    {
    import editUserModal from '@settings.Value.BaseUrl/StaticFiles/Vue/Components/EditUserModal.js'
    import changePasswordModal from '@settings.Value.BaseUrl/StaticFiles/Vue/Components/ChangePasswordModal.js'
    import {
        GetUserById, EditUser, EditKey,
        GetListOfFunctionFilter
    } from '@settings.Value.BaseUrl/StaticFiles/Vue/Services/IpassService.js'

    const Id = '@httpContextAccessor.HttpContext.User.Claims.SingleOrDefault(c => c.Type == ClaimTypes.Name).Value';
    const app = Vue.createApp({
        components: {
            editUserModal,
            changePasswordModal
        },
        data: function () {
            return {
                funcs:[],
                modelStateError: {},
                tooltipList: [],
                user: {},
                editViewModel: {
                    modifierId: Id,
                    userId: '',
                    email: ''
                },
                editKeyViewModel: {
                    userId: Id,
                    oldKey: '',
                    newKey: '',
                    newKey2:''
                }
            }
        },
        created: function () {
            this.GetUserById();
            this.GetListOfFunctionFilter();
        },
        methods: {
            OpenEditUserModal: function () {
                this.modelStateError = {};
                this.$refs.editUser.Show();
            },
            OpenChangePasswordModal: function () {
                this.$refs.changePassword.Show();
            },
            GetUserById: async function () {
                const Id = '@httpContextAccessor.HttpContext.User.Claims.SingleOrDefault(c => c.Type == ClaimTypes.Name).Value';
                try {
                    let query = {
                        params: {
                            userId: Id
                        }
                    };
                    const response = await GetUserById(query).then(response => response);
                    const status = response.status;
                    if (status === 200) {
                        const data = response.data;
                        const code = data.rtnCode;
                        switch (code) {
                            case 200:
                                this.user = data.rtnData;
                                break;
                            default:
                                break;
                        }
                    }
                }
                catch (exception) {
                    console.log(exception)
                }
            },
            GetListOfFunctionFilter: async function () {
                try {
                    const query = {
                        params: {
                            isWebSite: 'false',
                            funcClassEnName:'@(httpContextAccessor.HttpContext.Request.RouteValues["controller"] as string)'
                        }
                    };
                    const response = await GetListOfFunctionFilter(query).then(response => response);
                    const status = response.status;
                    if (status === 200) {
                        const data = response.data;
                        const code = data.rtnCode;
                        switch (code) {
                            case 200:
                                if (data.rtnData.length > 0) {
                                    this.funcs = data.rtnData[0].functions;
                                }
                                break;
                            default:
                                break;
                        }
                    }
                }
                catch (exception) {
                    console.log(exception)
                }
            },
            SaveProfile: async function (value) {
                this.editViewModel.email = value;
                this.editViewModel.userId = this.user.userId;
                try {
                    const response = await EditUser(this.editViewModel).then(response => response);
                    const status = response.status;
                    if (status === 200) {
                        const responseData = response.data;
                        switch (responseData.rtnCode) {
                            case 200:
                                await this.GetUserById();
                                this.$refs.editUser.Close();
                                const status = this.$common.ChangeReturnCode(responseData.rtnCode);
                                this.$toast.add({ severity: status, summary: responseData.rtnMessage, detail: '', life: 5000, group: 'backend-laoout' });
                                break;
                            case 401:
                            case 404:
                            case 417:
                                if (typeof (responseData.rtnData) === 'string') {
                                    this.modelStateError = JSON.parse(responseData.rtnData);
                                }
                                this.$emitter.emit('ServerErrorMessages', this.modelStateError);
                                break;
                            default:
                                throw new Error('代碼有誤');
                                break;
                        }
                    }
                }
                catch (exception) {
                    console.log(exception);
                }
            },
            SaveKey: async function (value) {
                this.editKeyViewModel = value;
                this.editKeyViewModel.userId = this.user.userId;
                try {
                    const response = await EditKey(this.editKeyViewModel).then(response => response);
                    if (response.status === 200) {
                        const responseData = response.data;
                        const code = responseData.rtnCode;
                        const status = this.$common.ChangeReturnCode(code);
                        switch (code) {
                            case 200:
                                this.$refs.changePassword.Close();
                                break;
                            case 401:
                                if (typeof (response.data.rtnData) === 'string') {
                                    this.modelStateError = JSON.parse(responseData.rtnData);
                                }
                                this.$emitter.emit('ServerErrorMessages', this.modelStateError);
                                break;
                            case 404:
                            case 417:
                            case 423:
                                this.$toast.add({ severity: status, summary: responseData.rtnMessage, detail: responseData.rtnData, life: 5000, group: 'backend-laoout' });
                                break;
                            default:
                                throw new Error('代碼有誤');
                                break;
                        }
                    }
                } catch (exception) {
                    console.log(exception);
                }
            }
        }
    })
    }
</script>
