@{
    ViewData["Title"] = "業務列表";
}
<div class="row p-3 justify-content-center">
    <p-toolbar class="w-98 mb-3">
        <template #start>
            <p-button label="新增業務" icon="pi pi-plus" class="p-button-success p-mr-2" v-on:click="OpenEditBusinessmanModal"></p-button>
        </template>
    </p-toolbar>
    <p-datatable v-bind:value="businesses" show-gridlines striped-rows responsive-layout="scroll" v-bind:paginator="true" v-bind:rows="10"
                 paginator-template="CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown"
                 v-bind:rows-per-page-options="[10,20,50]" current-page-report-template="Showing {first} to {last} of {totalRecords}"
                 v-model:selection="selectedBusinesse" selection-mode="single" data-key="UserId"
                 v-bind:resizable-columns="true" column-resize-mode="fit">
        <p-column field="UserId" header="帳號"></p-column>
        <p-column field="Email" header="電子信箱"></p-column>
        <p-column field="Role" header="角色"></p-column>
        <p-column field="Status" header="帳號狀態"></p-column>
        <p-column field="LastModifier" header="最後修改使用者"></p-column>
        <p-column field="LastModifyDate" header="最後修改時間"></p-column>
        <p-column field="LastLoginDate" header="最後登入時間"></p-column>
        <p-column field="LastChangePwdDate" header="最後更改密碼時間"></p-column>
        <p-column style="min-width:8rem" class="text-center">
            <template #body="slotProps">
                <p-button icon="bi bi-card-heading" class="p-button-rounded p-button-info me-5" v-on:click="OpenBusinessmanDetailModal(slotProps.data.UserId)"></p-button>
                <p-button icon="pi pi-pencil" class="p-button-rounded p-button-success me-5" v-on:click="editProduct(slotProps.data.UserId)"></p-button>
                <p-button icon="pi pi-trash" class="p-button-rounded p-button-warning" v-on:click="confirmDeleteProduct(slotProps.data)"></p-button>
            </template>
        </p-column>
        <template #paginatorstart>
            <p-button type="button" icon="pi pi-refresh" class="p-button-text"></p-button>
        </template>
        <template #paginatorend>
            <p-button type="button" icon="pi pi-cloud" class="p-button-text"></p-button>
        </template>
    </p-datatable>
</div>

<businessman-detail-modal ref="businessmanDetail" v-bind:pdetail="businesmanDetail"></businessman-detail-modal>
<edit-businessman-modal ref="editBusinessman" v-bind:temp-businesse="tempBusinesse" v-bind:is-new="isNew" v-bind:model-state-error="modelStateError" v-on:save="SaveBusinessman"></edit-businessman-modal>


<script type="text/javascript">
    @section Vue
    {
        import { GetBusinessmens, GetBusinessmanDetail, PostBusinessmen } from '/StaticFiles/Vue/Services/IpassService.js'
        import BusinessmanDetailModal from '/StaticFiles/Vue/Components/BusinessmanDetailModal.js'
        import EditBusinessmanModal from '/StaticFiles/Vue/Components/EditBusinessmanModal.js'

        const app = Vue.createApp({
            components: {
                "p-datatable": primevue.datatable,
                "p-column": primevue.column,
                "p-button": primevue.button,
                "p-toolbar": primevue.toolbar,
                BusinessmanDetailModal,
                EditBusinessmanModal
            },
            data: function () {
                return {
                    businesses: [],
                    selectedBusinesse: {},
                    businesmanDetail: {},
                    tempBusinesse: {},
                    isNew: true,
                    modelStateError:{}
                }
            },
            created: function () {
                this.GetBusinessmens();
            },
            methods: {
                GetBusinessmens: async function () {
                    try {
                        const response = await GetBusinessmens().then(response => response);
                        const status = response.status;
                        if (status === 200) {
                            const data = response.data;
                            const code = data.RtnCode;
                            switch (code) {
                                case 200:
                                    this.businesses = data.RtnData;
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                    catch (exception) {
                        console.log(exception);
                    }
                },
                editProduct: function (prod) {
                    console.log(prod);
                },
                GetBusinessmanDetail: async function (userId) {
                    try {
                        let query = {
                            params: {
                                userId: userId
                            }
                        }
                        const response = await GetBusinessmanDetail(query).then(response => response);
                        const status = response.status;
                        if (status === 200) {
                            const data = response.data;
                            const code = data.RtnCode;
                            const status = this.$common.ChangeReturnCode(code);
                            switch (code) {
                                case 200:
                                    console.log('200');
                                    this.businesmanDetail = data.RtnData;
                                    break;
                                case 404:                                    
                                    this.$toast.add({ severity: status, summary: responseData.RtnMessage, detail: responseData.RtnData, life: 5000, group: 'backend-laoout' });
                                    break
                                default:
                                    break;
                            }
                        }
                    }
                catch (exception) {
                        console.log(exception)
                    }
                },
                OpenBusinessmanDetailModal: function (userId) {
                    this.GetBusinessmanDetail(userId).then(() => {
                        if (Object.keys(this.businesmanDetail).length !== 0) {
                            this.$refs.businessmanDetail.Show();
                        }
                    });
                },
                OpenEditBusinessmanModal: function (isNew = true) {
                    this.isNew = isNew;
                    this.modelStateError = {};
                    if (isNew) {
                        this.tempBusinesse = {};
                    }
                    
                    this.$refs.editBusinessman.Show();
                },
                SaveBusinessman: async function (value) {
                    let response = null;
                    if (this.isNew) {
                        response = await PostBusinessmen(value).then(response => response);
                    }
                    const status = response.status;
                    if (status === 200) {
                        const responseData = response.data;
                        const code = responseData.RtnCode;
                        const status = this.$common.ChangeReturnCode(code);
                        switch (code) {
                            case 200:
                                this.$refs.editBusinessman.Close();
                                this.tempBusinesse = {};
                                this.$toast.add({ severity: status, summary: responseData.RtnMessage, detail: responseData.RtnData, life: 5000, group: 'backend-laoout' });
                                this.GetBusinessmens();
                                break;
                            case 401:
                                if (typeof (responseData.RtnData) === 'string') {
                                    this.modelStateError = JSON.parse(responseData.RtnData);
                                }
                                this.$emitter.emit('ServerErrorMessages', this.modelStateError);
                                break;
                            default:
                                break;
                        }
                    }
                }
            }
         })
    }
</script>
