@{
    ViewData["Title"] = "交易紀錄";
}

<div class="row p-3 justify-content-center">
    <div class="col-12 w-98 mb-2">
        <div class="p-toolbar p-component p-mb-4 row">
            <div class="col-12 mb-2" v-if="role === 'Manager'">
                <div class="row">
                    <div class="col-12">
                        <div class="border-bottom-gray mb-3">公司類型</div>
                    </div>
                    <div class="col-6 col-xl-4 mb-2">
                        <select class="form-select rounded-1" v-model="customer.custId" v-on:change="ChangeCusomerId">
                            <option value="" disabled>請選擇公司</option>
                            <option v-for="(cust,index) in customers" v-bind:key="cust.customerId" v-bind:value="cust.customerId">{{cust.customerName}}</option>
                        </select>
                    </div>
                    <div class="col-6  col-xl-4 mb-2">
                        <select class="form-select rounded-1" v-model="customer.storeId">
                            <option value="" disabled>請選擇特店</option>
                            <option v-for="(store,index) in stores" v-bind:key="store.storeId" v-bind:value="store.storeId">{{store.storeName}}</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="col-12 mb-2">
                <div class="row">
                    <div class="col-12">
                        <div class="border-bottom-gray mb-3">常用類型</div>
                    </div>
                    <div class="col-12 col-xl-6 mb-2 pt-2">
                        <div class="p-float-label d-inline-block mb-xl-2">
                            <p-calendar id="startDate" v-bind:show-icon="true" v-model="common.startDate" date-format="yy/mm/dd" v-bind:show-time="true"></p-calendar>
                            <label for="startDate">開始日期</label>
                        </div>
                        <span>～</span>
                        <div class="p-float-label p-mr-2 d-inline-block">
                            <p-calendar id="endDate" v-bind:show-icon="true" v-model="common.endDate" date-format="yy/mm/dd" v-bind:show-time="true"></p-calendar>
                            <label for="endDate">結束日期</label>
                        </div>
                    </div>
                    <div class="col-12 col-xl-6 mb-2 pt-2">
                        <span class="p-buttonset">
                            <p-button label="今天" v-on:click="setDate('today')"></p-button>
                            <p-button label="昨天" v-on:click="setDate('yesterday')"></p-button>
                            <p-button label="上週" v-on:click="setDate('last-week')"></p-button>
                            <p-button label="上月" v-on:click="setDate('last-month')"></p-button>
                        </span>
                    </div>
                    <div class="col-6 col-xl-6 mb-2 pt-2">
                        <input type="text" class="p-inputtext p-component form-control" placeholder="訂單編號" v-model="common.orderNo" />
                    </div>
                </div>
            </div>
            <div class="col-12 mb-4">
                <div class="row">
                    <div class="col-12">
                        <div data-bs-toggle="collapse" data-bs-target="#memberType" role="button" aria-expanded="false" aria-controls="memberType" v-on:click="isSearchbarSwitch=!isSearchbarSwitch">
                            <label v-bind:class="[{'searchbar-switch-show':isSearchbarSwitch},{'searchbar-switch-off':!isSearchbarSwitch}]"><i class="pi pi-angle-up"></i></label>
                            進階選項
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 mb-2">
                <div class="row collapse" id="memberType">
                    <div class="col-12">
                        <div class="border-bottom-gray mb-3">會員類型</div>
                    </div>
                    <div class="col-6 col-xl-4 mb-2">
                        <input type="text" class="p-inputtext p-component form-control" placeholder="會員ID" v-model="member.memberID" />
                    </div>
                    <div class="col-6  col-xl-4 mb-2">
                        <input type="text" class="p-inputtext p-component form-control" placeholder="會員手機號碼" v-model="member.phone" />
                    </div>
                    <div class="col-6  col-xl-4">
                        <input type="text" class="p-inputtext p-component form-control" placeholder="會員手機Email" v-model="member.email" />
                    </div>
                </div>
            </div>
            <div class="col-12">
                <div class="row justify-content-end">
                    <div class="text-end">
                        <p-button label="清空" icon="pi pi-trash" class="p-button-info p-mr-1 me-2" v-on:click="onClear"></p-button>
                        <p-button label="查詢" icon="pi pi-search" class="p-mr-1" v-on:click="onQuery"></p-button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-12">
        <div class="row align-items-stretch">
            <div class="col-8">
                <p-datatable v-bind:value="orders" show-gridlines striped-rows responsive-layout="scroll" v-bind:paginator="true" v-bind:rows="startRows"
                             paginator-template="CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown"
                             v-bind:rows-per-page-options="[5,10]" current-page-report-template="顯示第 {first} 至 {last} 項結果 ，共  {totalRecords}項"
                             v-model:selection="selectedOrder" selection-mode="single" data-key="orderNo"
                             v-bind:resizable-columns="true" column-resize-mode="fit" ref="orderTable" id="orderTable"
                             v-bind:lazy="true" v-bind:total-records="lazyParams.totalRecords" v-bind:loading="lazyParams.loading" v-on:page="onPage($event)"
                             v-on:row-select="onRowSelect">
                    <p-column v-for="(col,index) in columnsDefs" v-bind:key="col.field" v-bind:field="col.field" v-bind:header="col.header">
                        <template #body="slotProps" v-if="col.format ==='date'">
                            {{$format.FormatTWDate(slotProps.data[col.field])}}
                        </template>
                        <template #body="slotProps" v-if="col.format ==='orderStatus'">
                            {{$format.FormatOrderStatus(slotProps.data[col.field])}}
                        </template>
                    </p-column>
                    <template #empty>
                        查無相關訂單資訊
                    </template>
                    <template #paginatorstart>
                        <p-button type="button" icon="pi pi-refresh" class="p-button-text"></p-button>
                    </template>
                    <template #paginatorend>
                        <p-button type="button" icon="pi pi-cloud" class="p-button-text"></p-button>
                    </template>
                </p-datatable>
            </div>
            <div class="col-4">
                <template v-if="selectedOrder!==null">
                    <p-card v-bind:style="{ width:'100%',height:`${detailHeight}px`}">
                        <template #title>
                            <label class="text-break">{{selectedOrder.orderNo}}</label>
                        </template>
                        <template #content>
                            <p-scrollpanel v-bind:style="{ width:'100%',height:`${detailHeight*0.8}px`}" class="custombar1">
                                <div class="p-fluid">
                                    <div class="p-field mb-2 border-bottom-gray">
                                        <h5 class="transaction-title">手機號碼</h5>
                                        <label for="firstname">{{selectedOrder.phone}}</label>
                                    </div>
                                    <div class="p-field mb-2 border-bottom-gray">
                                        <h5 class="transaction-title">訂單狀態</h5>
                                        <label for="lastname">{{$format.FormatOrderStatus(selectedOrder.orderStatus)}}</label>
                                    </div>
                                    <div class="p-field mb-2 border-bottom-gray">
                                        <h5 class="transaction-title">付款狀態</h5>
                                        <label for="lastname">{{selectedOrder.payStatus}}</label>
                                    </div>
                                    <div class="p-field mb-2 border-bottom-gray">
                                        <h5 class="transaction-title">交易金額</h5>
                                        <label for="lastname">{{selectedOrder.amount}}</label>
                                    </div>
                                    <div class="p-field mb-2 border-bottom-gray">
                                        <h5 class="transaction-title">交易日期</h5>
                                        <label for="lastname">{{$format.FormatTWDate(selectedOrder.createDate)}}</label>
                                    </div>
                                    <div class="p-field mb-2 border-bottom-gray">
                                        <h5 class="transaction-title">取消日期</h5>
                                        <label for="lastname">{{$format.FormatTWDate(selectedOrder.voidDate)}}</label>
                                    </div>
                                    <div class="p-field mb-2 border-bottom-gray">
                                        <h5 class="transaction-title">退貨日期</h5>
                                        <label for="lastname">{{$format.FormatTWDate(selectedOrder.refundDate)}}</label>
                                    </div>
                                    <div class="p-field mb-2 border-bottom-gray">
                                        <h5 class="transaction-title">訂單描述</h5>
                                        <label for="lastname">{{selectedOrder.description}}</label>
                                    </div>
                                    <div class="p-field mt-5" v-if="this.$common.CheckAuthority(funcs,'TransactionRecordEdit')">
                                        <div class="row">
                                            <div class="col-12" v-if="selectedOrder.orderStatus ==='2'">
                                                <p-button label="取消" icon="pi pi-info-circle" class="p-button-warning p-mr-1" v-on:click="onVoid" v-bind:loading="loading"></p-button>
                                            </div>
                                            <div class="col-12" v-if="selectedOrder.orderStatus ==='4'">
                                                <p-button label="退貨" icon="pi pi-info-circle" class="p-button-danger p-mr-1" v-on:click="onRefund" v-bind:loading="loading"></p-button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </p-scrollpanel>
                        </template>
                    </p-card>
                </template>
            </div>
        </div>
    </div>

</div>

<script>
@section Vue
{
    import {
        GetOrdersCondition, Refund, Void,
        GetCustomers, GetStoreForDDL
    } from '@settings.Value.Urls.BaseUrl/StaticFiles/Vue/Services/IpassService.js'
    import { setDate } from '@settings.Value.Urls.BaseUrl/StaticFiles/Vue/Methods/Common.js'
    import commonMixins from '@settings.Value.Urls.BaseUrl/StaticFiles/Vue/Mixins/CommonMixins.js'
    const app = Vue.createApp({
        mixins: [commonMixins],
        components: {
            "p-toolbar": primevue.toolbar,
            "p-calendar": primevue.calendar,
            "p-scrollpanel": primevue.scrollpanel,
            "p-card": primevue.card,
            "p-column": primevue.column
        },
        data: function () {
            return {
                customer: {
                    custId: '',
                    storeId:''
                },
                common: {
                    startDate: '',
                    endDate: '',
                    orderNo:''
                },
                member: {
                    memberID: '',
                    phone: '',
                    email: ''
                },
                columnsDefs: [],
                selectedOrder: null,
                detailHeight: 0,
                orders: [],
                lazyParams: {
                    totalRecords: 0,
                    loading: false,
                    pageNumber: 0,
                    pageSize:0
                },
                startRows: 0,
                loading: false,
                isSearchbarSwitch: false,
                role: null,
                customers: [],
                stores:[]

            }
        },
        created: function () {
            this.columnsDefs = [
                { field: 'orderNo', header: '訂單號碼' },
                { field: 'phone', header: '手機' },
                { field: 'amount', header: '交易金額' },
                { field: 'createDate', header: '交易日期', format: 'date' },
                { field: 'orderStatus', header: '訂單狀態', format:'orderStatus' }
            ];
            const query = {
                params: {
                    isWebSite: 'false',
                    funcClassEnName: '@(httpContextAccessor.HttpContext.Request.RouteValues["controller"] as string)'
                }
            };
            this.GetListOfFunctionFilter(query);
            this.GetCustomers();
            this.startRows = 10;
            this.role = '@httpContextAccessor.HttpContext.User.Claims.SingleOrDefault(c=>c.Type == ClaimTypes.Role).Value';
        },
        mounted: function () {


        },
        methods: {
            GetStoreForDDL: async function () {
                try {
                    let query = {
                        params: {
                            customerId: this.customer.custId
                        }
                    };
                    const response = await GetStoreForDDL(query).then(response => response);
                    const status = response.status;
                    if (status === 200) {
                        const data = response.data;
                        const code = data.rtnCode;
                        switch (code) {
                            case 200:
                                if (data.rtnData != null) {
                                    this.stores = data.rtnData;
                                }
                                break;
                            default:
                                break;
                        }
                    }
                }
                catch (exception) {
                    console.log(exception)
                }
            },
            GetCustomers: async function () {
                try {
                    const response = await GetCustomers().then(response => response);
                    const status = response.status;
                    if (status === 200) {
                        const data = response.data;
                        const code = data.rtnCode;
                        switch (code) {
                            case 200:
                                if (data.rtnData != null) {
                                    this.customers = data.rtnData;
                                }
                                break;
                            default:
                                break;
                        }
                    }
                }
                catch (exception) {
                    console.log(exception)
                }
            },
            GetOrdersCondition: async function () {
                try {
                    // 業務需多在判斷公司及特店一定必填
                    if (this.customer.custId === '' || this.customer.storeId === '') {
                        this.$toast.add({ severity: 'error', summary: '驗證失敗', detail: '公司及特店為必填', life: 5000, group: 'backend-laoout' });
                        return;
                    }

                    let query = {
                        params: {
                            startDate: this.common.startDate,
                            endDate: this.common.endDate,
                            orderNo: this.common.orderNo,
                            memberID: this.member.memberID,
                            phone: this.member.phone,
                            email: this.member.email,
                            pageNumber: this.lazyParams.pageNumber,
                            pageSize: this.lazyParams.pageSize,
                            custId: this.customer.custId,
                            storeId: this.customer.storeId
                        }
                    };
                    this.lazyParams.loading = true;
                    const response = await GetOrdersCondition(query).then(response => response);
                    const status = response.status;
                    if (status === 200) {
                        const data = response.data;
                        const code = data.rtnCode;
                        const status = this.$common.ChangeReturnCode(code);
                        switch (code) {
                            case 200:
                                if (data.rtnData != null) {
                                    this.orders = data.rtnData.data;
                                    this.selectedOrder = null;
                                    this.lazyParams.totalRecords = data.rtnData.totalSize;
                                }
                                break;
                            case 401:
                                if (typeof (data.rtnData) === 'string') {
                                    const errorMessages = JSON.parse(data.rtnData);
                                    let result = '';
                                    for (let key in errorMessages) {
                                        const errorMessageArray = errorMessages[key];
                                        result += errorMessageArray.join('\n');
                                    }
                                    this.$toast.add({ severity: status, summary: data.rtnMessage, detail: result, life: 5000, group: 'backend-laoout' });
                                }
                                break;
                            default:
                                this.$toast.add({ severity: status, summary: data.rtnMessage, detail: data.rtnData, life: 5000, group: 'backend-laoout' });                                
                                break;
                        }
                    }
                    this.lazyParams.loading = false;
                }
                catch (exception) {
                    console.log(exception)
                    this.lazyParams.loading = false;
                }
            },
            onQuery: function() {
                this.lazyParams.pageNumber =  1;
                this.lazyParams.pageSize = this.startRows;
                this.GetOrdersCondition();
            },
            onPage: function (event) {
                this.lazyParams.pageNumber = event.page + 1;
                this.lazyParams.pageSize = event.rows;
                this.GetOrdersCondition();
            },
            onRowSelect: function () {
                let clientHeight = document.getElementById('orderTable').clientHeight;
                this.detailHeight = clientHeight > 500 ? clientHeight : 450;
            },
            onClear: function () {
                this.common = {
                    startDate: '',
                    endDate: '',
                    orderNo: ''
                };
                this.member = {
                    memberID: '',
                    phone: '',
                    email: ''
                };
                this.customer = {
                    custId: '',
                    storeId: ''
                };
            },
            setDate: function (status) {
                let dat = setDate(status);
                this.common.startDate = dat.start;
                this.common.endDate = dat.end;
            },
            onRefund: async function () {
                try {
                    this.loading = true;
                    const response = await Refund(this.selectedOrder).then(response => response);
                    const status = response.status;
                    if (status === 200) {
                        const data = response.data;
                        const code = data.rtnCode;
                        const status = this.$common.ChangeReturnCode(code);
                        switch (code) {
                            default:
                                this.$toast.add({ severity: status, summary: data.rtnMessage, detail: data.rtnData, life: 5000, group: 'backend-laoout' });
                                this.GetOrdersCondition();
                                break;
                        }
                    }
                    this.loading = false;
                }
                catch (exception) {
                    console.log(exception)
                }
            },
            onVoid: async function () {
                try {
                    this.loading = true;
                    const response = await Void(this.selectedOrder).then(response => response);
                    const status = response.status;
                    if (status === 200) {
                        const data = response.data;
                        const code = data.rtnCode;
                        const status = this.$common.ChangeReturnCode(code);
                        switch (code) {
                            default:
                                this.$toast.add({ severity: status, summary: data.rtnMessage, detail: data.rtnData, life: 5000, group: 'backend-laoout' });
                                this.GetOrdersCondition();
                                break;
                        }
                    }
                    this.loading = false;
                }
                catch (exception) {
                    console.log(exception)
                }
            },
            ChangeCusomerId: async function () {
                await this.GetStoreForDDL();
                this.customer.storeId = '';
            }
        }
    })
}
</script>