@{
    ViewData["Title"] = "Sign In";
}

<div class="container d-flex flex-column">
    <div class="row align-items-center justify-content-center g-0 min-vh-100">
        <div class="col-12 col-md-8 col-lg-6 col-xxl-4 py-8 py-xl-0">
            <!-- Card -->
            <div class="card smooth-shadow-md">
                <!-- Card body -->
                <div class="card-body p-6">
                    <div class="mb-4">
                        <a href="../index.html"><img src="/lib/dash-ui/images/brand/logo/logo-primary.svg" class="mb-2" alt=""></a>
                        <p class="mb-6">請輸入您的資訊</p>
                    </div>
                    <!-- Form -->
                    <v-form v-slot="{ values, errors}" v-on:submit="SignIn">
                        <!-- Username  -->
                        <div class="mb-3">
                            <label for="account" class="form-label">Account</label>
                            <v-field type="text" id="account" class="p-inputtext p-component form-control" name="account" placeholder="請輸入帳號"
                                     v-model.trim="SigninViewModel.UserId" rules="required" v-bind:class="[{'is-invalid':errors['account']||modelStateError['UserId']}]"></v-field>
                            <error-message name="account" class="invalid-feedback"></error-message>
                            <server-error-message v-bind:attr="'UserId'"></server-error-message>
                        </div>
                        <!-- Password -->
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <v-field type="password" id="password" class="p-inputtext p-component form-control" name="password" placeholder="請輸入密碼"
                                     v-model.trim="SigninViewModel.UserKey" rules="required" v-bind:class="[{'is-invalid':errors['password']||modelStateError['UserKey']}]"></v-field>
                            <error-message name="password" class="invalid-feedback"></error-message>
                            <server-error-message v-bind:attr="'UserKey'"></server-error-message>
                        </div>
                        <!-- Checkbox -->
                        <div class="d-lg-flex justify-content-between align-items-center mb-4">
                            <div class="form-check custom-checkbox">
                                <input type="checkbox" class="form-check-input" id="rememberme">
                                <label class="form-check-label" for="rememberme">記住此帳號</label>
                            </div>
                        </div>
                        <div>
                            <!-- Button -->
                            <div class="d-grid">
                                <p-button label="Sign in" type="submit"
                                          v-bind:disabled="Object.keys(errors).length !== 0 || !this.$common.CheckValueOfObjectIsNotEmpty(values)"></p-button>
                            </div>
                        </div>
                    </v-form>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
@section Vue
{
    import serverErrorMessage from '/StaticFiles/Vue/Components/ServerErrorMessage.js'
    import { PostSignin } from '/StaticFiles/Vue/Services/IpassService.js'
    const app = Vue.createApp({
        components: {
            serverErrorMessage,
            'pButton':primevue.button
        },
        data: function () {
            return {
                modelStateError: {},
                SigninViewModel: {
                    UserId: '',
                    UserKey:''
                }
            }
        },
        methods: {
            SignIn: async function () {
                try {
                    const response = await PostSignin(this.SigninViewModel).then(response => response);
                    const status = response.status;
                    if (status === 200) {
                        const responseData = response.data;
                        switch (responseData.RtnCode) {
                            case 200:
                                let baseURL = window.baseURL;
                                window.location.href = `${baseURL}`;
                                break;
                            case 401:
                                if (typeof(responseData.RtnData) === 'string') {
                                    this.modelStateError = JSON.parse(responseData.RtnData);
                                }
                                this.$emitter.emit('ServerErrorMessages', this.modelStateError);
                                break;
                            case 402:
                                const status = this.$common.ChangeReturnCode(responseData.RtnCode);
                                this.$toast.add({ severity: status, summary: responseData.RtnMessage, detail: responseData.RtnData, life: 5000, group: 'signin-laoout' });
                                break;
                            default:
                                throw new Error('代碼有誤');
                                break;
                        }
                    }
                }
                catch (exception) {
                    // 存入log
                    // 導去錯誤頁面
                    console.log(exception);
                }

            }
        }
    })
}
</script>
