@{
    ViewData["Title"] = "特店人員列表";
}

<div class="row p-3 justify-content-center">
    <div class="px-3">
        <div class="p-toolbar p-component w-100 mb-2">
            <div class="p-toolbar-group-left">
                <p-button label="新增特店人員" icon="pi pi-plus" class="p-button-success p-mr-2" v-on:click="OpenEditStoreModal(true)" v-if="this.$common.CheckAuthority(funcs,'OperatePersonnel')"></p-button>
            </div>
            <div class="p-toolbar-group-right">
                <span class="p-input-icon-left">
                    <i class="pi pi-search"></i>
                    <input type="text" class="p-inputtext p-component p-filled"
                           v-model="filtersPersonnels['global'].value" placeholder="搜尋" />
                </span>
            </div>
        </div>
    </div>
    <p-datatable v-bind:value="personnels" show-gridlines striped-rows responsive-layout="scroll" v-bind:paginator="true" v-bind:rows="10"
                 paginator-template="CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown"
                 v-bind:rows-per-page-options="[10,20,50]" current-page-report-template="顯示第 {first} 至 {last} 項結果 ，共  {totalRecords}項"
                 v-model:selection="selectedStore" selection-mode="single" data-key="userId"
                 v-bind:resizable-columns="true" column-resize-mode="fit"
                 v-bind:global-filter-fields="['userId','email','status']"
                 v-model:filters="filtersPersonnels" filter-display="menu">
        <p-column v-for="(col,index) in columnsDefs" v-bind:key="col.field" v-bind:field="col.field" v-bind:header="col.header">
            <template #body="slotProps" v-if="col.format =='date'">
                {{$format.FormatTWDate(slotProps.data[col.field])}}
            </template>
        </p-column>
        <p-column style="min-width:8rem" class="text-center"  v-if="this.$common.CheckAuthority(funcs,'OperatePersonnel')">
            <template #body="slotProps" v-if="this.$common.CheckAuthority(funcs,'OperatePersonnel')">
                <p-button icon="pi pi-pencil" class="p-button-rounded p-button-success me-5" v-tooltip.top="'編輯特店人員資訊'" v-on:click="OpenEditStoreModal(false,slotProps.data.userId)"></p-button>
                <p-button icon="bi bi-gear" class="p-button-rounded p-button-warning" v-tooltip.top="'權限設定'" v-on:click="OpenStorePersonnelSettingModal(slotProps.data)"></p-button>
            </template>
        </p-column>
        <template #empty>
            查無相關特店人員資訊
        </template>
        <template #paginatorstart>
            <p-button type="button" icon="pi pi-refresh" class="p-button-text"></p-button>
        </template>
        <template #paginatorend>
            <p-button type="button" icon="pi pi-cloud" class="p-button-text"></p-button>
        </template>
    </p-datatable>
</div>

<edit-store-personnel-modal ref="editStorePersonnel" v-bind:temp-store-personnel="tempStorePersonnel" v-bind:is-new="isNew" v-bind:temp-login-id="loginId"
                  v-bind:model-state-error="modelStateError" v-on:save="SaveStorePersonnel" v-bind:temp-account-status="accountStatus"
                  v-bind:temp-loading ="loading"></edit-store-personnel-modal>
<store-personnel-authority-setting-modal v-bind:store-personnel-authority="storePersonnelAuthority"  ref="storePersonnelAuthoritySetting"
                                         v-bind:temp-uid="tempUid" v-bind:temp-loading="loading" v-on:save="SaveAuthority"></store-personnel-authority-setting-modal>
<script type="text/javascript">
    @section Vue
    {
        const { FilterMatchMode } = primevue.api;
        import {
        GetStorePersonnels,
        GetAccountStatusEnum, GetUserById,
        GetListOfFunctionFilter, PostStorePersonnel,
        UpdateStorePersonnel, GetStorePersonnelAuthority,
        UpdateStorePersonnelAuthority
        } from '@settings.Value.Urls.BaseUrl/StaticFiles/Vue/Services/IpassService.js'
        import editStorePersonnelModal from '@settings.Value.Urls.BaseUrl/StaticFiles/Vue/Components/EditPersonnelModal.js'
        import storePersonnelAuthoritySettingModal from '@settings.Value.Urls.BaseUrl/StaticFiles/Vue/Components/StorePersonnelAuthoritySettingModal.js'
        const app = Vue.createApp({
            components: {
                "p-datatable": primevue.datatable,
                "p-column": primevue.column,
                "p-toolbar": primevue.toolbar,
                editStorePersonnelModal,
                storePersonnelAuthoritySettingModal
            },
            data: function () {
                return {
                    columnsDefs: [],
                    personnels: [],
                    tempStorePersonnel: {},
                    selectedStore: {},
                    storeDetail: {},
                    isNew: null,
                    modelStateError: {},
                    accountStatus: [],
                    filtersPersonnels: null,
                    funcs: [],
                    loginId: '@httpContextAccessor.HttpContext.User.Claims.SingleOrDefault(c=>c.Type == ClaimTypes.Name).Value' + '_',
                    loading: false,
                    storePersonnelAuthority: {},
                    tempUid: null
                }
            },
            created: function () {
                this.columnsDefs = [
                    { field: 'userId', header: '帳號' },
                    { field: 'personnelName', header: '名稱' },
                    { field: 'email', header: '電子信箱' },
                    { field: 'role', header: '角色' },
                    { field: 'status', header: '帳號狀態' },
                    { field: 'lastModifier', header: '最後修改使用者' },
                    { field: 'lastModifyDate', header: '最後修改時間', format: 'date' },
                    { field: 'lastLoginDate', header: '最後登入時間', format: 'date' },
                    { field: 'lastChangePwdDate', header: '最後更改密碼時間', format: 'date'}
                ];
                this.GetStorePersonnels();
                this.GetAccountStatusEnum();
                this.InitFilters();
                this.GetListOfFunctionFilter();
            },
            methods: {
               GetListOfFunctionFilter: async function () {
                    try {
                        const query = {
                            params: {
                                isWebSite: 'false',
                                funcClassEnName:'@(httpContextAccessor.HttpContext.Request.RouteValues["controller"] as string)'
                            }
                        };
                        const response = await GetListOfFunctionFilter(query).then(response => response);
                        const status = response.status;
                        if (status === 200) {
                            const data = response.data;
                            const code = data.rtnCode;
                            switch (code) {
                                case 200:
                                    if (data.rtnData.length > 0) {
                                        this.funcs = data.rtnData[0].functions;
                                    }
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                    catch (exception) {
                        console.log(exception)
                    }
                },
                GetStorePersonnels: async function () {
                    try {
                        const response = await GetStorePersonnels().then(response => response);
                        const status = response.status;
                        if (status === 200) {
                            const data = response.data;
                            const code = data.rtnCode;
                            switch (code) {
                                case 200:
                                    this.personnels = data.rtnData;
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                    catch (exception) {
                        console.log(exception);
                    }
                },
                GetUserById: async function (userId) {
                    try {
                        let query = {
                            params: {
                                userId: userId
                            }
                        };
                        const response = await GetUserById(query).then(response => response);
                        const status = response.status;
                        if (status === 200) {
                            const data = response.data;
                            const code = data.rtnCode;
                            switch (code) {
                                case 200:
                                    this.tempStorePersonnel = data.rtnData;
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                    catch (exception) {
                        console.log(exception);
                    }
                },
                OpenEditStoreModal: async function (isNew = true, userId = '') {
                    this.isNew = isNew;
                    this.modelStateError = {};
                    if (isNew) {
                        this.tempStorePersonnel = {};
                    }
                    else {
                        await this.GetUserById(userId);
                    }
                    this.$refs.editStorePersonnel.Show();
                },
                SaveStorePersonnel: async function (value) {
                    try {
                        let response = null;
                        this.loading = true;
                        if (this.isNew) {
                            response = await PostStorePersonnel(value).then(response => response);
                        } else {
                            response = await UpdateStorePersonnel(value).then(response => response);
                        }
                        const status = response.status;
                        if (status === 200) {
                            const responseData = response.data;
                            const code = responseData.rtnCode;
                            const status = this.$common.ChangeReturnCode(code);
                            switch (code) {
                                case 200:
                                    await this.GetStorePersonnels();
                                    this.tempStorePersonnel = {};
                                    this.$refs.editStorePersonnel.Close();
                                    this.$toast.add({ severity: status, summary: responseData.rtnMessage, detail: responseData.rtnData, life: 5000, group: 'backend-laoout' });   
                                    break;
                                case 401:
                                    if (typeof (responseData.rtnData) === 'string') {
                                        this.modelStateError = JSON.parse(responseData.rtnData);
                                    }
                                    this.$emitter.emit('ServerErrorMessages', this.modelStateError);
                                    break;
                                case 405:
                                case 417:
                                    this.$toast.add({ severity: status, summary: responseData.rtnMessage, detail: responseData.rtnData, life: 5000, group: 'backend-laoout' });
                                    break;
                                default:
                                    break;
                            }
                        }
                        this.loading = false;
                    }
                    catch (ex) {
                        console.log(ex);
                        this.loading = false;
                    }

                },
                GetAccountStatusEnum: async function () {
                    try {
                        const response = await GetAccountStatusEnum().then(response => response);
                        const status = response.status;
                        if (status === 200) {
                            const data = response.data;
                            const code = data.rtnCode;
                            switch (code) {
                                case 200:
                                    if (typeof data.rtnData === 'string') {
                                        this.accountStatus = JSON.parse(data.rtnData);
                                    } else {
                                        this.accountStatus = data.rtnData;
                                    }
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                    catch (exception) {
                        console.log(exception)
                    }
                },
                InitFilters: function () {
                    this.filtersPersonnels = {
                        'global': { value: null, matchMode: FilterMatchMode.CONTAINS },
                    }
                },
                GetStorePersonnelAuthority: async function (userId) {
                    try {
                        let query = {
                            params: {
                                userId: userId
                            }
                        }
                        const response = await GetStorePersonnelAuthority(query).then(response => response);
                        const status = response.status;
                        if (status === 200) {
                            const data = response.data;
                            const code = data.rtnCode;
                            const status = this.$common.ChangeReturnCode(code);
                            switch (code) {
                                case 200:
                                    this.storePersonnelAuthority = data.rtnData;
                                    break;
                                case 404:
                                    this.storePersonnelAuthority = {};
                                    this.$toast.add({ severity: status, summary: data.rtnMessage, detail: data.rtnData, life: 5000, group: 'backend-laoout' });
                                    break
                                default:
                                    break;
                            }
                        }
                    }
                    catch (exception) {
                        console.log(exception)
                    }
                },
                OpenStorePersonnelSettingModal: function ({ userId, uid }) {
                    this.GetStorePersonnelAuthority(userId).then(() => {
                        if (Object.keys(this.storePersonnelAuthority).length !== 0) {
                            this.tempUid = uid;
                            this.$refs.storePersonnelAuthoritySetting.Show();
                        }
                    });
                },
                SaveAuthority: async function (value) {
                    try {
                        this.loading = true;
                        const response = await UpdateStorePersonnelAuthority(value).then(response => response);
                        const status = response.status;
                        if (status === 200) {
                            const responseData = response.data;
                            const status = this.$common.ChangeReturnCode(responseData.rtnCode);
                            switch (responseData.rtnCode) {
                                case 200:
                                    await this.GetStorePersonnels();
                                    this.$refs.storePersonnelAuthoritySetting.Close();
                                    this.$toast.add({ severity: status, summary: responseData.rtnMessage, detail: '', life: 5000, group: 'backend-laoout' });
                                    break;
                                case 417:
                                    this.$toast.add({ severity: status, summary: responseData.rtnMessage, detail: '', life: 5000, group: 'backend-laoout' });
                                    break;
                                default:
                                    throw new Error('代碼有誤');
                                    break;
                            }
                        }
                        this.loading = false;
                    }
                    catch (exception) {
                        console.log(exception);
                        this.loading = false;
                    }
                }
            }
         })
    }
</script>