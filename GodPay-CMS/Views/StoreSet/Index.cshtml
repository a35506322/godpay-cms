@{
    ViewData["Title"] = "特店列表";
}

<div class="row p-3 justify-content-center">
    <div class="px-3">
        <div class="p-toolbar p-component w-100 mb-2">
            <div class="p-toolbar-group-left">
                <p-button label="新增特店" icon="pi pi-plus" class="p-button-success p-mr-2" v-on:click="OpenEditStoreModal(true)" v-if="this.$common.CheckAuthority(funcs,'OperateStore')"></p-button>
            </div>
            <div class="p-toolbar-group-right">
                <span class="p-input-icon-left">
                    <i class="pi pi-search"></i>
                    <input type="text" class="p-inputtext p-component p-filled"
                           v-model="filtersStores['global'].value" placeholder="搜尋" />
                </span>
            </div>
        </div>
    </div>
    <p-datatable v-bind:value="stores" show-gridlines striped-rows responsive-layout="scroll" v-bind:paginator="true" v-bind:rows="10"
                 paginator-template="CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown"
                 v-bind:rows-per-page-options="[10,20,50]" current-page-report-template="顯示第 {first} 至 {last} 項結果 ，共  {totalRecords}項"
                 v-model:selection="selectedStore" selection-mode="single" data-key="userId"
                 v-bind:resizable-columns="true" column-resize-mode="fit"
                 v-bind:global-filter-fields="['userId','email','status']"
                 v-model:filters="filtersStores" filter-display="menu">
        <p-column v-for="(col,index) in columnsDefs" v-bind:key="col.field" v-bind:field="col.field" v-bind:header="col.header">
            <template #body="slotProps" v-if="col.format =='date'">
                {{$format.FormatTWDate(slotProps.data[col.field])}}
            </template>
        </p-column>
        <p-column style="min-width:8rem" class="text-center">
            <template #body="slotProps">
                <p-button icon="bi bi-card-heading" class="p-button-rounded p-button-info me-5" v-tooltip.top="'特店詳細資訊'" v-on:click="OpenStoreDetailModal(slotProps.data.uid)"></p-button>
                <template v-if="this.$common.CheckAuthority(funcs,'OperateStore')">
                    <p-button icon="pi pi-pencil" class="p-button-rounded p-button-success me-5" v-tooltip.top="'編輯特店資訊'" v-on:click="OpenEditStoreModal(false,slotProps.data.userId)"></p-button>
                    <p-button icon="bi bi-gear" class="p-button-rounded p-button-warning" v-tooltip.top="'權限設定'" v-on:click="OpenStoreAuthoritySettingModal(slotProps.data)"></p-button>
                </template>
            </template>
        </p-column>
        <template #empty>
            查無相關特店資訊
        </template>
        <template #paginatorstart>
            <p-button type="button" icon="pi pi-refresh" class="p-button-text"></p-button>
        </template>
        <template #paginatorend>
            <p-button type="button" icon="pi pi-cloud" class="p-button-text"></p-button>
        </template>
    </p-datatable>
</div>

<store-detail-modal ref="storeDetail" v-bind:pdetail="storeDetail"></store-detail-modal>
<edit-store-modal ref="editStore" v-bind:temp-store="tempStore" v-bind:is-new="isNew" v-bind:temp-loading ="loading"
                  v-bind:model-state-error="modelStateError" v-on:save="SaveStores" v-bind:temp-account-status="accountStatus"
                  v-bind:temp-customers="customers"></edit-store-modal>
<store-authority-setting-modal ref="storeAuthoritySetting" v-bind:store-authority="storeAuthority" 
                               v-bind:temp-uid="tempUid" v-on:save="SaveAuthority" v-bind:temp-loading ="loading"></store-authority-setting-modal>

<script type="text/javascript">
    @section Vue
    {
        const { FilterMatchMode } = primevue.api;
        import {
        GetStores, GetStoreDetail, PostUserAndStore,
        GetAccountStatusEnum, GetStore, UpateUserAndStore,
        GetListOfFunctionFilter, GetCustomers, GetStoreAuthority,
        UpdateStoreAuthority
        } from '@settings.Value.Urls.BaseUrl/StaticFiles/Vue/Services/IpassService.js'
        import storeDetailModal from '@settings.Value.Urls.BaseUrl/StaticFiles/Vue/Components/StoreDetailModal.js'
        import editStoreModal from '@settings.Value.Urls.BaseUrl/StaticFiles/Vue/Components/EditStoreModal.js'
        import storeAuthoritySettingModal from '@settings.Value.Urls.BaseUrl/StaticFiles/Vue/Components/StoreAuthoritySettingModal.js'
        const app = Vue.createApp({
            components: {
                "p-datatable": primevue.datatable,
                "p-column": primevue.column,
                "p-toolbar": primevue.toolbar,
                storeDetailModal,
                editStoreModal,
                storeAuthoritySettingModal
            },
            data: function () {
                return {
                    columnsDefs: [],
                    stores: [],
                    tempStore: {},
                    selectedStore: {},
                    storeDetail: {},
                    isNew: null,
                    modelStateError: {},
                    accountStatus: [],
                    filtersStores: null,
                    funcs: [],
                    customers: [],
                    storeAuthority: {},
                    tempUid: 0,
                    loading: false
                }
            },
            created: function () {
                this.GetStores();
                this.columnsDefs = [
                    { field: 'userId', header: '帳號' },
                    { field: 'email', header: '電子信箱' },
                    { field: 'roleChName', header: '角色' },
                    { field: 'statusChName', header: '帳號狀態' },
                    { field: 'lastModifier', header: '最後修改使用者' },
                    { field: 'lastModifyDate', header: '最後修改時間', format: 'date'},
                    { field: 'lastLoginDate', header: '最後登入時間', format: 'date'},
                    { field: 'lastChangePwdDate', header: '最後更改密碼時間', format: 'date' }
                ];
                this.GetAccountStatusEnum();
                this.InitFilters();
                this.GetListOfFunctionFilter();
                this.GetCustomers();
            },
            methods: {
               GetListOfFunctionFilter: async function () {
                    try {
                        const query = {
                            params: {
                                isWebSite: 'false',
                                funcClassEnName:'@(httpContextAccessor.HttpContext.Request.RouteValues["controller"] as string)'
                            }
                        };
                        const response = await GetListOfFunctionFilter(query).then(response => response);
                        const status = response.status;
                        if (status === 200) {
                            const data = response.data;
                            const code = data.rtnCode;
                            switch (code) {
                                case 200:
                                    if (data.rtnData.length > 0) {
                                        this.funcs = data.rtnData[0].functions;
                                    }
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                    catch (exception) {
                        console.log(exception)
                    }
                },
                GetStores: async function () {
                    try {
                        const response = await GetStores().then(response => response);
                        const status = response.status;
                        if (status === 200) {
                            const data = response.data;
                            const code = data.rtnCode;
                            switch (code) {
                                case 200:
                                    this.stores = data.rtnData;
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                    catch (exception) {
                        console.log(exception);
                    }
                },
                GetStore: async function (userId) {
                    try {
                        let query = {
                            params: {
                                userId: userId
                            }
                        };
                        const response = await GetStore(query).then(response => response);
                        const status = response.status;
                        if (status === 200) {
                            const data = response.data;
                            const code = data.rtnCode;
                            switch (code) {
                                case 200:
                                    this.tempStore = data.rtnData;
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                    catch (exception) {
                        console.log(exception);
                    }
                },
                GetStoreDetail: async function (uid) {
                    try {
                        let query = {
                            params: {
                                uid:uid
                            }
                        }
                        const response = await GetStoreDetail(query).then(response => response);
                        const status = response.status;
                        if (status === 200) {
                            const data = response.data;
                            const code = data.rtnCode;
                            const status = this.$common.ChangeReturnCode(code);
                            switch (code) {
                                case 200:
                                    this.storeDetail = data.rtnData;
                                    break;
                                case 404:
                                    this.storeDetail = {};
                                    this.$toast.add({ severity: status, summary: data.rtnMessage, detail: data.rtnData, life: 5000, group: 'backend-laoout' });
                                    break
                                default:
                                    break;
                            }
                        }
                    }
                    catch (exception) {
                        console.log(exception);
                    }
                },
                OpenStoreDetailModal: function (uid) {
                    this.GetStoreDetail(uid).then(() => {
                        if (Object.keys(this.storeDetail).length !== 0) {
                            this.$refs.storeDetail.Show();
                        }
                    })
                },
                OpenEditStoreModal: async function (isNew = true, userId = '') {
                    this.isNew = isNew;
                    this.modelStateError = {};
                    if (isNew) {
                        this.tempStore = {};
                    }
                    else {
                        await this.GetStore(userId);
                    }
                    this.$refs.editStore.Show();
                },
                SaveStores: async function (value) {
                    try {
                        this.loading = true;
                        let response = null;
                        if (this.isNew) {
                            response = await PostUserAndStore(value).then(response => response);
                        } else {
                            response = await UpateUserAndStore(value).then(response => response);
                        }
                        const status = response.status;
                        if (status === 200) {
                            const responseData = response.data;
                            const code = responseData.rtnCode;
                            const status = this.$common.ChangeReturnCode(code);
                            switch (code) {
                                case 200:
                                    await this.GetStores();
                                    this.tempStore = {};
                                    this.$refs.editStore.Close();     
                                    this.$toast.add({ severity: status, summary: responseData.rtnMessage, detail: responseData.rtnData, life: 5000, group: 'backend-laoout' });                                   
                                    break;
                                case 401:
                                    if (typeof (responseData.rtnData) === 'string') {
                                        this.modelStateError = JSON.parse(responseData.rtnData);
                                    }
                                    this.$emitter.emit('ServerErrorMessages', this.modelStateError);
                                    break;
                                case 405:
                                    this.$toast.add({ severity: status, summary: responseData.rtnMessage, detail: responseData.rtnData, life: 5000, group: 'backend-laoout' });
                                    break;
                                default:
                                    break;
                            }
                        }
                        this.loading = false;
                    }
                    catch (ex) {
                        console.log(ex);
                        this.loading = false;
                    }                   
                },
                GetAccountStatusEnum: async function () {
                    try {
                        const response = await GetAccountStatusEnum().then(response => response);
                        const status = response.status;
                        if (status === 200) {
                            const data = response.data;
                            const code = data.rtnCode;
                            switch (code) {
                                case 200:
                                    if (typeof data.rtnData === 'string') {
                                        this.accountStatus = JSON.parse(data.rtnData);
                                    } else {
                                        this.accountStatus = data.rtnData;
                                    }
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                    catch (exception) {
                        console.log(exception)
                    }
                },
                InitFilters: function () {
                    this.filtersStores = {
                        'global': { value: null, matchMode: FilterMatchMode.CONTAINS },
                    }
                },
                GetCustomers: async function () {
                    const response = await GetCustomers().then(response => response);
                    const status = response.status;
                    if (status === 200) {
                        const data = response.data;
                        const code = data.rtnCode;
                        const status = this.$common.ChangeReturnCode(code);
                        switch (code) {
                            case 200:
                                this.customers = data.rtnData;
                                break;
                            case 404:
                                this.customers = [];
                                this.$toast.add({ severity: status, summary: data.rtnMessage, detail: data.rtnData, life: 5000, group: 'backend-laoout' });
                                break
                            default:
                                break;
                        }
                    }
                },
                OpenStoreAuthoritySettingModal: async function ({ userId, uid }) {
                    this.GetStoreAuthority(userId).then(() => {
                        if (Object.keys(this.storeAuthority).length !== 0) {
                            this.tempUid = uid;
                            this.$refs.storeAuthoritySetting.Show();
                        }
                    });
                },
                GetStoreAuthority: async function (userId) {
                    try {
                        let query = {
                            params: {
                                userId: userId
                            }
                        }
                        const response = await GetStoreAuthority(query).then(response => response);
                        const status = response.status;
                        if (status === 200) {
                            const data = response.data;
                            const code = data.rtnCode;
                            const status = this.$common.ChangeReturnCode(code);
                            switch (code) {
                                case 200:
                                    this.storeAuthority = data.rtnData;
                                    break;
                                case 404:
                                    this.storeAuthority = {};
                                    this.$toast.add({ severity: status, summary: data.rtnMessage, detail: data.rtnData, life: 5000, group: 'backend-laoout' });
                                    break
                                default:
                                    break;
                            }
                        }
                    }
                    catch (exception) {
                        console.log(exception)
                    }
                },
                SaveAuthority: async function (value) {
                    this.updateUserAuthorityViewModel = value;
                    try {
                        this.loading = true;
                        const response = await UpdateStoreAuthority(this.updateUserAuthorityViewModel).then(response => response);
                        const status = response.status;
                        if (status === 200) {
                            const responseData = response.data;
                            const status = this.$common.ChangeReturnCode(responseData.rtnCode);
                            switch (responseData.rtnCode) {
                                case 200:
                                    await this.GetStores();
                                    this.$refs.storeAuthoritySetting.Close();
                                    this.$toast.add({ severity: status, summary: responseData.rtnMessage, detail: '', life: 5000, group: 'backend-laoout' });
                                    break;
                                case 417:
                                    this.$toast.add({ severity: status, summary: responseData.rtnMessage, detail: '', life: 5000, group: 'backend-laoout' });
                                    break;
                                default:
                                    throw new Error('代碼有誤');
                                    break;
                            }
                        }
                        this.loading = false;
                    }
                    catch (exception) {
                        console.log(exception);
                        this.loading = false;
                    }
                }

            }
         })
    }
</script>