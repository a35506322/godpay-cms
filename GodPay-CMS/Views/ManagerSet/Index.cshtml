@{
    ViewData["Title"] = "業務管理";
}

<div class="row p-3 justify-content-center">
    <div class="px-3">
        <div class="p-toolbar p-component w-100 mb-2">
            <div class="p-toolbar-group-left">
                <p-button label="新增業務" icon="pi pi-plus" class="p-button-success p-mr-2" v-on:click="OpenEditManagerModal(true)" v-if="this.$common.CheckAuthority(funcs,'OperateManager')"></p-button>
            </div>
            <div class="p-toolbar-group-right">
                <span class="p-input-icon-left">
                    <i class="pi pi-search"></i>
                    <input type="text" class="p-inputtext p-component p-filled"
                           v-model="filtersManager['global'].value" placeholder="搜尋" />
                </span>
            </div>
        </div>
    </div>
    <p-datatable v-bind:value="managers" show-gridlines striped-rows responsive-layout="scroll" v-bind:paginator="true" v-bind:rows="10"
                 paginator-template="CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown"
                 v-bind:rows-per-page-options="[10,20,50]" current-page-report-template="顯示第 {first} 至 {last} 項結果 ，共  {totalRecords}項"
                 v-model:selection="selectedManager" selection-mode="single" data-key="userId"
                 v-bind:resizable-columns="true" column-resize-mode="fit"
                 v-bind:global-filter-fields="['userId','email','status']"
                 v-model:filters="filtersManager" filter-display="menu">
        <p-column field="userId" header="帳號"></p-column>
        <p-column field="email" header="電子信箱"></p-column>
        <p-column field="roleChName" header="角色"></p-column>
        <p-column field="statusChName" header="帳號狀態"></p-column>
        <p-column field="lastModifier" header="最後修改使用者" ></p-column>
        <p-column field="lastModifyDate" header="最後修改時間">
            <template #body="slotProps">
                {{$format.FormatTWDate(slotProps.data.lastModifyDate)}}
            </template>
        </p-column>
        <p-column field="lastLoginDate" header="最後登入時間">
            <template #body="slotProps">
                {{$format.FormatTWDate(slotProps.data.lastLoginDate)}}
            </template>
        </p-column>
        <p-column field="lastChangePwdDate" header="最後更改密碼時間">
            <template #body="slotProps">
                {{$format.FormatTWDate(slotProps.data.lastChangePwdDate)}}
            </template>
        </p-column>
        <p-column style="min-width:8rem" class="text-center">
            <template #body="slotProps">
                <p-button icon="bi bi-card-heading" class="p-button-rounded p-button-info me-5" v-tooltip.top="'業務詳細資訊'" v-on:click="OpenManagerDetailModal(slotProps.data.uid)"></p-button>           
                <template v-if="this.$common.CheckAuthority(funcs,'OperateManager')">
                    <p-button icon="pi pi-pencil" class="p-button-rounded p-button-success me-5" v-tooltip.top="'編輯業務資訊'" v-on:click="OpenEditManagerModal(false,slotProps.data.userId)"></p-button>
                    <p-button icon="bi bi-gear" class="p-button-rounded p-button-warning" v-tooltip.top="'權限設定'" v-on:click="OpenManagerAuthoritySettingModal(slotProps.data)"></p-button>
                </template>
            </template>
        </p-column>
        <template #empty>
            查無相關業務資訊
        </template>
        <template #paginatorstart>
            <p-button type="button" icon="pi pi-refresh" class="p-button-text"></p-button>
        </template>
        <template #paginatorend>
            <p-button type="button" icon="pi pi-cloud" class="p-button-text"></p-button>
        </template>
    </p-datatable>
</div>

<manager-detail-modal ref="managerDetail" v-bind:pdetail="managerDetail"></manager-detail-modal>
<edit-manager-modal ref="editManager" v-bind:temp-manager="tempManager" v-bind:is-new="isNew" v-bind:temp-loading ="loading"
                    v-bind:model-state-error="modelStateError" v-on:save="SaveManager" v-bind:temp-account-status="accountStatus"></edit-manager-modal>
<manager-authority-setting-modal ref="managerAuthoritySetting" v-bind:manager-authority="managerAuthority"
                                 v-bind:temp-uid="tempUid" v-bind:temp-loading ="loading" v-on:save="SaveAuthority"></manager-authority-setting-modal>


<script type="text/javascript">
@section Vue
{
    const { FilterMatchMode} = primevue.api;
    import {
        GetManagerAll, GetManagerDeatil,
        PostManagerAndInsider, GetManager, UpdateManagerAndInsider,
        GetAccountStatusEnum,GetManagerAuthority, UpdateManagerAuthority
    } from '@settings.Value.Urls.BaseUrl/StaticFiles/Vue/Services/IpassService.js'
    import managerDetailModal from '@settings.Value.Urls.BaseUrl/StaticFiles/Vue/Components/ManagerDetailModal.js'
    import editManagerModal from '@settings.Value.Urls.BaseUrl/StaticFiles/Vue/Components/EditManagerModal.js'
    import managerAuthoritySettingModal from '@settings.Value.Urls.BaseUrl/StaticFiles/Vue/Components/ManagerAuthoritySettingModal.js'
    import commonMixins from '@settings.Value.Urls.BaseUrl/StaticFiles/Vue/Mixins/CommonMixins.js'

    const app = Vue.createApp({
        mixins: [commonMixins],
        components: {
            managerDetailModal,
            editManagerModal,
            managerAuthoritySettingModal
        },
        data: function () {
            return {
                managers: [],
                selectedManager: {},
                managerDetail: {},
                tempManager: {},
                isNew: null,
                modelStateError: {},
                accountStatus: [],
                filtersManager: null,
                managerAuthority: {},
                tempUid: 0,
                loading: false
            }
        },
        created: function () {
            this.GetManagerAll();
            const query = {
                params: {
                    isWebSite: 'false',
                    funcClassEnName: '@(httpContextAccessor.HttpContext.Request.RouteValues["controller"] as string)'
                }
            };
            this.GetListOfFunctionFilter(query);
            this.GetAccountStatusEnum();
            this.InitFilters();
        },
        methods: {
            GetManagerAll: async function () {
                try {
                    const response = await GetManagerAll().then(response => response);
                    const status = response.status;
                    if (status === 200) {
                        const data = response.data;
                        const code = data.rtnCode;
                        switch (code) {
                            case 200:
                                this.managers = data.rtnData;
                                break;
                            default:
                                break;
                        }
                    }
                }
                catch (exception) {
                    console.log(exception);
                }
            },
            GetAccountStatusEnum: async function () {
                try {
                    const response = await GetAccountStatusEnum().then(response => response);
                    const status = response.status;
                    if (status === 200) {
                        const data = response.data;
                        const code = data.rtnCode;
                        switch (code) {
                            case 200:
                                if (typeof data.rtnData === 'string') {
                                    this.accountStatus = JSON.parse(data.rtnData);
                                } else {
                                    this.accountStatus = data.rtnData;
                                }
                                break;
                            default:
                                break;
                        }
                    }
                }
                catch (exception) {
                    console.log(exception)
                }
            },
            GetManager: async function (userId) {
                try {
                    let query = {
                        params: {
                            userId: userId
                        }
                    }
                    const response = await GetManager(query).then(response => response);
                    const status = response.status;
                    if (status === 200) {
                        const data = response.data;
                        const code = data.rtnCode;
                        const status = this.$common.ChangeReturnCode(code);
                        switch (code) {
                            case 200:
                                this.tempManager = data.rtnData;
                                break;
                            default:
                                this.tempManager = {};
                                this.$toast.add({ severity: status, summary: data.rtnMessage, detail: data.rtnData, life: 5000, group: 'backend-laoout' });
                                break;
                        }
                    }
                }
                catch (exception) {
                    console.log(exception);
                }

            },
            GetManagerDeatil: async function (uid) {
                try {
                    let query = {
                        params: {
                            uid: uid
                        }
                    }
                    const response = await GetManagerDeatil(query).then(response => response);
                    const status = response.status;
                    if (status === 200) {
                        const data = response.data;
                        const code = data.rtnCode;
                        const status = this.$common.ChangeReturnCode(code);
                        switch (code) {
                            case 200:
                                this.managerDetail = data.rtnData;
                                break;
                            default:
                                this.managerDetail = {};
                                this.$toast.add({ severity: status, summary: data.rtnMessage, detail: data.rtnData, life: 5000, group: 'backend-laoout' });
                                break;
                        }
                    }
                }
            catch (exception) {
                    console.log(exception)
                }
            },
            OpenManagerDetailModal: function (uid) {
                this.GetManagerDeatil(uid).then(() => {
                    if (Object.keys(this.managerDetail).length !== 0) {
                        this.$refs.managerDetail.Show();
                    }
                });
            },
            OpenEditManagerModal: async function (isNew = true,userId='') {
                this.isNew = isNew;
                this.modelStateError = {};
                if (isNew) {
                    this.tempManager = {};
                    this.$refs.editManager.Show();
                }
                else {
                    this.GetManager(userId).then(() => {
                        if (Object.keys(this.tempManager).length !== 0) {
                            this.$refs.editManager.Show();
                        }
                    });
                }
            },
            SaveManager: async function (value) {
                try {
                    let response = null;
                    this.loading = true;
                    if (this.isNew) {
                        response = await PostManagerAndInsider(value).then(response => response);
                    } else {
                        response = await UpdateManagerAndInsider(value).then(response => response);
                    }
                    const status = response.status;
                    if (status === 200) {
                        const responseData = response.data;
                        const code = responseData.rtnCode;
                        const status = this.$common.ChangeReturnCode(code);
                        switch (code) {
                            case 200:
                                await this.GetManagerAll();
                                this.tempManager = {};
                                this.$refs.editManager.Close();
                                this.$toast.add({ severity: status, summary: responseData.rtnMessage, detail: responseData.rtnData, life: 5000, group: 'backend-laoout' });
                                break;
                            case 401:
                                if (typeof (responseData.rtnData) === 'string') {
                                    this.modelStateError = JSON.parse(responseData.rtnData);
                                }
                                this.$emitter.emit('ServerErrorMessages', this.modelStateError);
                                break;
                            default:
                                this.$toast.add({ severity: status, summary: responseData.rtnMessage, detail: responseData.rtnData, life: 5000, group: 'backend-laoout' });
                                break;
                        }
                    }
                    this.loading = false;
                }
                catch (ex) {
                    console.log(ex);
                    this.loading = false;
                }

            },
            InitFilters: function () {
                this.filtersManager = {
                    'global': { value: null, matchMode: FilterMatchMode.CONTAINS },
                }
            },
            GetManagerAuthority: async function (userId) {
                try {
                    let query = {
                        params: {
                            userId: userId
                        }
                    }
                    const response = await GetManagerAuthority(query).then(response => response);
                    const status = response.status;
                    if (status === 200) {
                        console.log(response)
                        const data = response.data;
                        const code = data.rtnCode;
                        const status = this.$common.ChangeReturnCode(code);
                        switch (code) {
                            case 200:
                                this.managerAuthority = data.rtnData;
                                break;
                            default:
                                this.managerAuthority = {};
                                this.$toast.add({ severity: status, summary: data.rtnMessage, detail: data.rtnData, life: 5000, group: 'backend-laoout' });
                                break;
                        }
                    }
                }
                catch (exception) {
                    console.log(exception)
                }
            },
            OpenManagerAuthoritySettingModal: function ({ userId, uid }) {
                this.GetManagerAuthority(userId).then(() => {
                    if (Object.keys(this.managerAuthority).length !== 0) {
                        this.tempUid = uid;
                        this.$refs.managerAuthoritySetting.Show();
                    }
                });
            },
            SaveAuthority: async function (value) {
                try {
                    this.loading = true;
                    const response = await UpdateManagerAuthority(value).then(response => response);
                    const status = response.status;
                    if (status === 200) {
                        const responseData = response.data;
                        const status = this.$common.ChangeReturnCode(responseData.rtnCode);
                        switch (responseData.rtnCode) {
                            case 200:
                                await this.GetManagerAll();
                                this.$refs.managerAuthoritySetting.Close();
                                this.$toast.add({ severity: status, summary: responseData.rtnMessage, detail: responseData.rtnData, life: 5000, group: 'backend-laoout' });
                                break;
                            default:
                                this.$toast.add({ severity: status, summary: responseData.rtnMessage, detail: responseData.rtnData, life: 5000, group: 'backend-laoout' });
                                break;
                        }
                    }
                    this.loading = false;
                }
                catch (exception) {
                    console.log(exception);
                    this.loading = false;
                }
            }
        }
        })
}
</script>
