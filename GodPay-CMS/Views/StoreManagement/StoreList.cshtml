@{
    ViewData["Title"] = "特店列表";
}

<div class="row p-3 justify-content-center">
    <p-toolbar class="w-98 mb-3">
        <template #start>
            <p-button label="新增特店" icon="pi pi-plus" class="p-button-success p-mr-2" v-on:click="OpenEditStoreModal"></p-button>
        </template>
    </p-toolbar>
    <p-datatable v-bind:value="stores" show-gridlines striped-rows responsive-layout="scroll" v-bind:paginator="true" v-bind:rows="10"
                 paginator-template="CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown"
                 v-bind:rows-per-page-options="[10,20,50]" current-page-report-template="Showing {first} to {last} of {totalRecords}"
                 v-model:selection="selectedStore" selection-mode="single" data-key="UserId"
                 v-bind:resizable-columns="true" column-resize-mode="fit">
        <p-column v-for="(col,index) in columnsDefs" v-bind:key="col.field" v-bind:field="col.field" v-bind:header="col.header"></p-column>
        <p-column style="min-width:8rem" class="text-center">
            <template #body="slotProps">
                <p-button icon="bi bi-card-heading" class="p-button-rounded p-button-info me-5" v-tooltip.top="'特店詳細資訊'" v-on:click="OpenStoreDetailModal(slotProps.data.Uid)"></p-button>
                <p-button icon="pi pi-pencil" class="p-button-rounded p-button-success me-5" v-tooltip.top="'編輯特店資訊'"></p-button>
                <p-button icon="bi bi-gear" class="p-button-rounded p-button-warning" v-tooltip.top="'權限設定'"></p-button>
            </template>
        </p-column>
        <template #paginatorstart>
            <p-button type="button" icon="pi pi-refresh" class="p-button-text"></p-button>
        </template>
        <template #paginatorend>
            <p-button type="button" icon="pi pi-cloud" class="p-button-text"></p-button>
        </template>
    </p-datatable>
</div>

<store-detail-modal ref="storeDetail" v-bind:pdetail="storeDetail"></store-detail-modal>
<edit-store-modal ref="editStore" v-bind:stores="stores" v-bind:is-new="isNew"
                  v-bind:model-state-error="modelStateError" v-on:save="SaveStores"></edit-store-modal>

<script type="text/javascript">
    @section Vue
    {
        import {
        GetStores, GetStoreDetail, PostStore
        } from '/StaticFiles/Vue/Services/IpassService.js'
        import StoreDetailModal from '/StaticFiles/Vue/Components/StoreDetailModal.js'
        import EditStoreModal from '/StaticFiles/Vue/Components/EditStoreModal.js'
        const app = Vue.createApp({
            components: {
                "p-datatable": primevue.datatable,
                "p-column": primevue.column,
                "p-button": primevue.button,
                "p-toolbar": primevue.toolbar,
                StoreDetailModal,
                EditStoreModal
            },
            data: function () {
                return {
                    columnsDefs: [],
                    stores: [],
                    selectedStore: {},
                    storeDetail: {},
                    isNew: true,
                    modelStateError: {},
                }
            },
            created: function () {
                this.GetStores();
                this.columnsDefs = [
                    { field: 'UserId', header: '帳號' },
                    { field: 'Email', header: '電子信箱' },
                    { field: 'Role', header: '角色' },
                    { field: 'Status', header: '帳號狀態' },
                    { field: 'LastModifier', header: '最後修改使用者' },
                    { field: 'LastModifyDate', header: '最後修改時間' },
                    { field: 'LastLoginDate', header: '最後登入時間' },
                    { field: 'LastChangePwdDate', header: '最後更改密碼時間' }
                ];
            },
            methods: {
                GetStores: async function () {
                    try {
                        const response = await GetStores().then(response => response);
                        const status = response.status;
                        if (status === 200) {
                            const data = response.data;
                            const code = data.RtnCode;
                            switch (code) {
                                case 200:
                                    this.stores = data.RtnData;
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                    catch (exception) {
                        console.log(exception);
                    }
                },
                GetStoreDetail: async function (uid) {
                    console.log(uid)
                    try {
                        let query = {
                            params: {
                                uid:uid
                            }
                        }
                        const response = await GetStoreDetail(query).then(response => response);
                        const status = response.status;
                        if (status === 200) {
                            const data = response.data;
                            const code = data.RtnCode;
                            const status = this.$common.ChangeReturnCode(code);
                            switch (code) {
                                case 200:
                                    this.storeDetail = data.RtnData;
                                    break;
                                case 404:
                                    this.$toast.add({ severity: status, summary: data.RtnMessage, detail: data.RtnData, life: 5000, group: 'backend-laoout' });
                                    break
                                default:
                                    break;
                            }
                        }
                    }
                    catch (exception) {
                        console.log(exception);
                    }
                },
                OpenStoreDetailModal: function (uid) {
                    this.GetStoreDetail(uid).then(() => {
                        if (Object.keys(this.storeDetail).length !== 0) {
                            this.$refs.storeDetail.Show();
                        }
                    })
                },
                editProduct: function (prod) {
                    console.log(prod);
                },
                OpenEditStoreModal: async function (isNew = true, userId = '') {
                    this.isNew = isNew;
                    if (isNew) {
                        this.tempBusinesse = {};
                    }
                    else {
                        await this.GetStores(userId);
                    }
                    this.$refs.editStore.Show();
                },
                SaveStore: async function (value) {
                    let response = null;
                    if (this.isNew) {
                        response = await PostBusinessmen(value).then(response => response);
                    } else {

                    }
                }

            }
         })
    }
</script>